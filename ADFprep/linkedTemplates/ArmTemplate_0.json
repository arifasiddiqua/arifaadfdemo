{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "ADFprep"
		},
		"linkedservise_arifa_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'linkedservise_arifa'"
		},
		"SqlServervirtualmachine1_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'SqlServervirtualmachine1'"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/pipeline4')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Wait1",
						"type": "Wait",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"waitTimeInSeconds": 1
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/linkedservise_arifa')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('linkedservise_arifa_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/IRselfhosted-arifa')]",
			"type": "Microsoft.DataFactory/factories/integrationRuntimes",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "SelfHosted",
				"typeProperties": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/deptdata')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "linkedservise_arifa",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "departmentdata.csv",
						"folderPath": "input",
						"container": "arifacontainer"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "depid",
						"type": "String"
					},
					{
						"name": "deptname",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/linkedservise_arifa')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/empdata')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "linkedservise_arifa",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "empdata.csv",
						"folderPath": "input",
						"container": "arifacontainer"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "eid",
						"type": "String"
					},
					{
						"name": "name",
						"type": "String"
					},
					{
						"name": "gender",
						"type": "String"
					},
					{
						"name": "deptid",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/linkedservise_arifa')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/filteroutput')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "linkedservise_arifa",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "output",
						"container": "arifacontainer"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "Name",
						"type": "String"
					},
					{
						"name": "Category",
						"type": "String"
					},
					{
						"name": "Status",
						"type": "String"
					},
					{
						"name": "Error",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/linkedservise_arifa')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/inputdataset')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "linkedservise_arifa",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "empdata.csv",
						"folderPath": "input",
						"container": "arifacontainer"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/linkedservise_arifa')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/joinoutput')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "linkedservise_arifa",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "output",
						"container": "arifacontainer"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "Name",
						"type": "String"
					},
					{
						"name": "Category",
						"type": "String"
					},
					{
						"name": "Status",
						"type": "String"
					},
					{
						"name": "Error",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/linkedservise_arifa')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/outputdataset')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "linkedservise_arifa",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "output",
						"container": "arifacontainer"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/linkedservise_arifa')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/outputdataset1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "linkedservise_arifa",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "output",
						"container": "arifacontainer"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "Name",
						"type": "String"
					},
					{
						"name": "Category",
						"type": "String"
					},
					{
						"name": "Status",
						"type": "String"
					},
					{
						"name": "Error",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/linkedservise_arifa')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/sampleForUnpivot')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "linkedservise_arifa",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "unpivot.csv",
						"folderPath": "input",
						"container": "arifacontainer"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "po",
						"type": "String"
					},
					{
						"name": "name",
						"type": "String"
					},
					{
						"name": "apple",
						"type": "String"
					},
					{
						"name": "mango",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/linkedservise_arifa')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/surrogacy')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "linkedservise_arifa",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "surrogacy key.csv",
						"folderPath": "input",
						"container": "arifacontainer"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "NAME",
						"type": "String"
					},
					{
						"name": "AREA",
						"type": "String"
					},
					{
						"name": "GENDER",
						"type": "String"
					},
					{
						"name": "EMPID",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/linkedservise_arifa')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/window')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "linkedservise_arifa",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "windowstransformation.csv",
						"folderPath": "input",
						"container": "arifacontainer"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "eid",
						"type": "String"
					},
					{
						"name": "name",
						"type": "String"
					},
					{
						"name": "country",
						"type": "String"
					},
					{
						"name": "salary",
						"type": "String"
					},
					{
						"name": "department",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/linkedservise_arifa')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SqlServervirtualmachine1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "sqlserver is connected to the laptop",
				"annotations": [],
				"type": "SqlServer",
				"typeProperties": {
					"connectionString": "[parameters('SqlServervirtualmachine1_connectionString')]"
				},
				"connectVia": {
					"referenceName": "IRselfhosted-arifa",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/IRselfhosted-arifa')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SqlServerTable1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SqlServervirtualmachine1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": "tabdep"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SqlServervirtualmachine1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/OPNOTEXIST')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "empdata",
								"type": "DatasetReference"
							},
							"name": "empdat"
						},
						{
							"dataset": {
								"referenceName": "deptdata",
								"type": "DatasetReference"
							},
							"name": "det"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "outputdataset1",
								"type": "DatasetReference"
							},
							"name": "outputNOTEXIST",
							"rejectedDataLinkedService": {
								"referenceName": "linkedservise_arifa",
								"type": "LinkedServiceReference"
							}
						}
					],
					"transformations": [
						{
							"name": "notexist"
						}
					],
					"scriptLines": [
						"source(output(",
						"          eid as string,",
						"          name as string,",
						"          gender as string,",
						"          deptid as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> empdat",
						"source(output(",
						"          depid as string,",
						"          deptname as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     partitionBy('hash', 1)) ~> det",
						"empdat, det exists(deptid == depid,",
						"     negate:true,",
						"     partitionBy('hash', 1),",
						"     broadcast: 'auto')~> notexist",
						"notexist sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Name as string,",
						"          Category as string,",
						"          Status as string,",
						"          Error as string",
						"     ),",
						"     partitionFileNames:['notexist.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> outputNOTEXIST"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/empdata')]",
				"[concat(variables('factoryId'), '/datasets/deptdata')]",
				"[concat(variables('factoryId'), '/datasets/outputdataset1')]",
				"[concat(variables('factoryId'), '/linkedServices/linkedservise_arifa')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/aggregete')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "empdata",
								"type": "DatasetReference"
							},
							"name": "employeedata"
						},
						{
							"dataset": {
								"referenceName": "deptdata",
								"type": "DatasetReference"
							},
							"name": "department"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "outputdataset1",
								"type": "DatasetReference"
							},
							"name": "outputForJoinAndGroupby",
							"rejectedDataLinkedService": {
								"referenceName": "linkedservise_arifa",
								"type": "LinkedServiceReference"
							}
						}
					],
					"transformations": [
						{
							"name": "countofemplouyeesbydept"
						},
						{
							"name": "join1"
						},
						{
							"name": "RemoveColumns1",
							"description": "Autogenerated by data preview actions"
						}
					],
					"scriptLines": [
						"source(output(",
						"          eid as integer,",
						"          name as string,",
						"          gender as string,",
						"          deptid as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     partitionBy('hash', 1)) ~> employeedata",
						"source(output(",
						"          depid as integer,",
						"          deptname as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     inferDriftedColumnTypes: true,",
						"     ignoreNoFilesFound: false,",
						"     partitionBy('hash', 1)) ~> department",
						"employeedata aggregate(groupBy(deptid),",
						"     totalemployees = count(eid),",
						"     partitionBy('hash', 1)) ~> countofemplouyeesbydept",
						"countofemplouyeesbydept, department join(deptid == depid,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     partitionBy('hash', 1),",
						"     broadcast: 'auto')~> join1",
						"join1 select(mapColumn(",
						"          totalemployees,",
						"          deptname",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> RemoveColumns1",
						"RemoveColumns1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Name as string,",
						"          Category as string,",
						"          Status as string,",
						"          Error as string",
						"     ),",
						"     partitionFileNames:['joinandgroupby'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> outputForJoinAndGroupby"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/empdata')]",
				"[concat(variables('factoryId'), '/datasets/deptdata')]",
				"[concat(variables('factoryId'), '/datasets/outputdataset1')]",
				"[concat(variables('factoryId'), '/linkedServices/linkedservise_arifa')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/cndsplit')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "empdata",
								"type": "DatasetReference"
							},
							"name": "empdata"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "outputdataset1",
								"type": "DatasetReference"
							},
							"name": "itpeople"
						},
						{
							"dataset": {
								"referenceName": "outputdataset1",
								"type": "DatasetReference"
							},
							"name": "HRpeoples",
							"rejectedDataLinkedService": {
								"referenceName": "linkedservise_arifa",
								"type": "LinkedServiceReference"
							}
						},
						{
							"dataset": {
								"referenceName": "outputdataset1",
								"type": "DatasetReference"
							},
							"name": "salespeople",
							"rejectedDataLinkedService": {
								"referenceName": "linkedservise_arifa",
								"type": "LinkedServiceReference"
							}
						}
					],
					"transformations": [
						{
							"name": "split1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          eid as string,",
						"          name as string,",
						"          gender as string,",
						"          deptid as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> empdata",
						"empdata split(equals(deptid,'1'),",
						"     equals(deptid,'2'),",
						"     equals(deptid,'3'),",
						"     disjoint: false,",
						"     partitionBy('hash', 1)) ~> split1@(ITemp, HRemp, SALESemp)",
						"split1@ITemp sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Name as string,",
						"          Category as string,",
						"          Status as string,",
						"          Error as string",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> itpeople",
						"split1@HRemp sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Name as string,",
						"          Category as string,",
						"          Status as string,",
						"          Error as string",
						"     ),",
						"     partitionFileNames:['HR'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> HRpeoples",
						"split1@SALESemp sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Name as string,",
						"          Category as string,",
						"          Status as string,",
						"          Error as string",
						"     ),",
						"     partitionFileNames:['sales'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> salespeople"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/empdata')]",
				"[concat(variables('factoryId'), '/datasets/outputdataset1')]",
				"[concat(variables('factoryId'), '/linkedServices/linkedservise_arifa')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflow1')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "empdata",
								"type": "DatasetReference"
							},
							"name": "source1"
						},
						{
							"dataset": {
								"referenceName": "deptdata",
								"type": "DatasetReference"
							},
							"name": "source2"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "joinoutput",
								"type": "DatasetReference"
							},
							"name": "sink1",
							"rejectedDataLinkedService": {
								"referenceName": "linkedservise_arifa",
								"type": "LinkedServiceReference"
							}
						}
					],
					"transformations": [
						{
							"name": "join1"
						},
						{
							"name": "RemoveColumns1",
							"description": "Autogenerated by data preview actions"
						}
					],
					"scriptLines": [
						"source(output(",
						"          eid as integer,",
						"          name as string,",
						"          gender as string,",
						"          deptid as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source1",
						"source(output(",
						"          depid as integer,",
						"          deptname as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source2",
						"source1, source2 join(deptid == depid,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join1",
						"join1 select(mapColumn(",
						"          eid,",
						"          name,",
						"          gender,",
						"          deptname",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> RemoveColumns1",
						"RemoveColumns1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Name as string,",
						"          Category as string,",
						"          Status as string,",
						"          Error as string",
						"     ),",
						"     partitionFileNames:['join output'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/empdata')]",
				"[concat(variables('factoryId'), '/datasets/deptdata')]",
				"[concat(variables('factoryId'), '/datasets/joinoutput')]",
				"[concat(variables('factoryId'), '/linkedServices/linkedservise_arifa')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflow2')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "empdata",
								"type": "DatasetReference"
							},
							"name": "emp"
						},
						{
							"dataset": {
								"referenceName": "deptdata",
								"type": "DatasetReference"
							},
							"name": "dept"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "outputdataset1",
								"type": "DatasetReference"
							},
							"name": "sink1",
							"rejectedDataLinkedService": {
								"referenceName": "linkedservise_arifa",
								"type": "LinkedServiceReference"
							}
						}
					],
					"transformations": [
						{
							"name": "existstransformation"
						}
					],
					"scriptLines": [
						"source(output(",
						"          eid as string,",
						"          name as string,",
						"          gender as string,",
						"          deptid as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     partitionBy('hash', 1)) ~> emp",
						"source(output(",
						"          depid as string,",
						"          deptname as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     partitionBy('hash', 1)) ~> dept",
						"emp, dept exists(deptid == depid,",
						"     negate:false,",
						"     partitionBy('hash', 1),",
						"     broadcast: 'auto')~> existstransformation",
						"existstransformation sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Name as string,",
						"          Category as string,",
						"          Status as string,",
						"          Error as string",
						"     ),",
						"     partitionFileNames:['exist.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/empdata')]",
				"[concat(variables('factoryId'), '/datasets/deptdata')]",
				"[concat(variables('factoryId'), '/datasets/outputdataset1')]",
				"[concat(variables('factoryId'), '/linkedServices/linkedservise_arifa')]"
			]
		}
	]
}