{
	"name": "union",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "empdata",
						"type": "DatasetReference"
					},
					"name": "empdata"
				},
				{
					"dataset": {
						"referenceName": "deptdata",
						"type": "DatasetReference"
					},
					"name": "dedata"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "outputdataset1",
						"type": "DatasetReference"
					},
					"name": "sink1",
					"rejectedDataLinkedService": {
						"referenceName": "linkedservise_arifa",
						"type": "LinkedServiceReference"
					}
				}
			],
			"transformations": [
				{
					"name": "union1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          eid as string,",
				"          name as string,",
				"          gender as string,",
				"          deptid as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     partitionBy('hash', 1)) ~> empdata",
				"source(output(",
				"          depid as string,",
				"          deptname as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     partitionBy('hash', 1)) ~> dedata",
				"empdata, dedata union(byName: true,",
				"     partitionBy('hash', 1))~> union1",
				"union1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          Name as string,",
				"          Category as string,",
				"          Status as string,",
				"          Error as string",
				"     ),",
				"     partitionFileNames:['unionoutput.csv'],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> sink1"
			]
		}
	}
}