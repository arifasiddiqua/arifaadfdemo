{
	"name": "cndsplit",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "empdata",
						"type": "DatasetReference"
					},
					"name": "empdata"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "outputdataset1",
						"type": "DatasetReference"
					},
					"name": "itpeople"
				},
				{
					"dataset": {
						"referenceName": "outputdataset1",
						"type": "DatasetReference"
					},
					"name": "HRpeoples",
					"rejectedDataLinkedService": {
						"referenceName": "linkedservise_arifa",
						"type": "LinkedServiceReference"
					}
				},
				{
					"dataset": {
						"referenceName": "outputdataset1",
						"type": "DatasetReference"
					},
					"name": "salespeople",
					"rejectedDataLinkedService": {
						"referenceName": "linkedservise_arifa",
						"type": "LinkedServiceReference"
					}
				}
			],
			"transformations": [
				{
					"name": "split1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          eid as string,",
				"          name as string,",
				"          gender as string,",
				"          deptid as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> empdata",
				"empdata split(equals(deptid,'1'),",
				"     equals(deptid,'2'),",
				"     equals(deptid,'3'),",
				"     disjoint: false,",
				"     partitionBy('hash', 1)) ~> split1@(ITemp, HRemp, SALESemp)",
				"split1@ITemp sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          Name as string,",
				"          Category as string,",
				"          Status as string,",
				"          Error as string",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> itpeople",
				"split1@HRemp sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          Name as string,",
				"          Category as string,",
				"          Status as string,",
				"          Error as string",
				"     ),",
				"     partitionFileNames:['HR'],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> HRpeoples",
				"split1@SALESemp sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          Name as string,",
				"          Category as string,",
				"          Status as string,",
				"          Error as string",
				"     ),",
				"     partitionFileNames:['sales'],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> salespeople"
			]
		}
	}
}